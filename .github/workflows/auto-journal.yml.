name: Auto Journal

on:
  # 1) הרצה ידנית – מאפשר לבחור פעולה, תאריך ותוכן
  workflow_dispatch:
    inputs:
      action:
        description: write | append | delete | get
        required: true
        default: write
      date:
        description: 'YYYY-MM-DD or "today"'
        required: false
        default: today
      text:
        description: 'Content to write/append (ignored for delete/get)'
        required: false
        default: ""
  # 2) פקודות טבעיות דרך תגובה ל-Issue (למשל "Journal Control")
  issue_comment:
    types: [created]

permissions:
  contents: write      # commit & push
  issues: write        # לכתוב תגובה חזרה לאישיו (אם צריך)

jobs:
  auto-journal:
    runs-on: ubuntu-latest
    env:
      TZ: "Asia/Jerusalem"  # שעון ישראל לכל ה-job

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Derive parameters (action/date/text) from trigger
        id: derive
        shell: bash
        run: |
          set -euo pipefail

          EVENT_NAME="${{ github.event_name }}"
          ACTION=""
          DATE_IN=""
          TEXT=""

          if [[ "$EVENT_NAME" == "workflow_dispatch" ]]; then
            ACTION="${{ github.event.inputs.action }}"
            DATE_IN="${{ github.event.inputs.date }}"
            TEXT="${{ github.event.inputs.text }}"
          else
            # issue_comment
            PAYLOAD='${{ toJson(github.event) }}'
            BODY="$(printf '%s' "$PAYLOAD" | jq -r '.comment.body')"

            # ברירת מחדל
            ACTION="write"
            TEXT="$BODY"

            # זיהוי פעולות טבעי בעברית/אנגלית
            shopt -s nocasematch
            if [[ "$BODY" =~ מחק[[:space:]]+יומן|delete[[:space:]]+journal ]]; then
              ACTION="delete"
            elif [[ "$BODY" =~ שלוף[[:space:]]+יומן|get[[:space:]]+journal ]]; then
              ACTION="get"
            elif [[ "$BODY" =~ הוסף[[:space:]]+ליומן|append[[:space:]]+journal ]]; then
              ACTION="append"
            elif [[ "$BODY" =~ כתוב[[:space:]]+ביומן|write[[:space:]]+journal ]]; then
              ACTION="write"
            fi
            shopt -u nocasematch

            # חיפוש תאריך בפורמט YYYY-MM-DD בטקסט; אם אין – today
            if DATE_CANDIDATE="$(grep -Eo '[0-9]{4}-[0-9]{2}-[0-9]{2}' <<<"$BODY" | head -n1)"; then
              DATE_IN="$DATE_CANDIDATE"
            else
              DATE_IN="today"
            fi
          fi

          # נרמול תאריך
          if [[ "$DATE_IN" == "today" || -z "$DATE_IN" ]]; then
            DATE_STR="$(date +%F)"                       # YYYY-MM-DD לפי TZ=Asia/Jerusalem
          else
            # אימות בסיסי לפורמט; אם לא תקין – נופלים ל-today
            if [[ "$DATE_IN" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
              DATE_STR="$DATE_IN"
            else
              DATE_STR="$(date +%F)"
            fi
          fi

          FILE="context/journal-${DATE_STR}.md"

          echo "action=$ACTION"   >> "$GITHUB_OUTPUT"
          echo "date=$DATE_STR"   >> "$GITHUB_OUTPUT"
          echo "text<<__TXT__"    >> "$GITHUB_OUTPUT"
          printf '%s' "$TEXT"     >> "$GITHUB_OUTPUT"
          echo "__TXT__"          >> "$GITHUB_OUTPUT"
          echo "file=$FILE"       >> "$GITHUB_OUTPUT"

      - name: Ensure context folder
        run: mkdir -p context

      - name: Apply action
        id: apply
        shell: bash
        run: |
          set -euo pipefail
          ACTION='${{ steps.derive.outputs.action }}'
          DATE='${{ steps.derive.outputs.date }}'
          FILE='${{ steps.derive.outputs.file }}'
          TEXT='${{ steps.derive.outputs.text }}'
          TS="$(date '+%H:%M')"

          changed="false"

          if [[ "$ACTION" == "delete" ]]; then
            if [[ -f "$FILE" ]]; then
              rm -f "$FILE"
              changed="true"
              echo "Deleted $FILE"
            else
              echo "No journal for $DATE to delete."
            fi

          elif [[ "$ACTION" == "get" ]]; then
            if [[ -f "$FILE" ]]; then
              echo "### Journal for $DATE" >> "$GITHUB_STEP_SUMMARY"
              echo '' >> "$GITHUB_STEP_SUMMARY"
              echo '```markdown' >> "$GITHUB_STEP_SUMMARY"
              cat "$FILE" >> "$GITHUB_STEP_SUMMARY"
              echo '```' >> "$GITHUB_STEP_SUMMARY"
            else
              echo "No journal for $DATE." >> "$GITHUB_STEP_SUMMARY"
            fi

          elif [[ "$ACTION" == "append" ]]; then
            # אם הקובץ לא קיים – ניצור כותרת בסיסית
            if [[ ! -f "$FILE" ]]; then
              cat > "$FILE" <<EOF
# 🗓️ יומן פרויקט — $DATE

## פרטים כלליים
- מנהל: יניב מזרחי
- קובץ: \`$FILE\`

## עדכונים יומיים
EOF
            fi

            {
              echo ""
              echo "### ⏱️ $TS"
              echo ""
              if [[ -n "$TEXT" ]]; then
                printf "%s\n" "$TEXT"
              else
                echo "_(append – no explicit text)_"
              fi
            } >> "$FILE"
            changed="true"
            echo "Appended to $FILE"

          else
            # write (overwrite): תבנית מלאה חדשה
            cat > "$FILE" <<EOF
# 🗓️ יומן פרויקט — $DATE

## פרטים כלליים
- מנהל: יניב מזרחי
- קובץ: \`$FILE\`

## עדכונים יומיים
### ⏱️ $TS
$( [[ -n "$TEXT" ]] && printf "%s\n" "$TEXT" || echo "_(entry created)_" )

## מדדים (אופציונלי)
- התקדמות כוללת: 0%

## משימות הבאות
- [ ] …
EOF
            changed="true"
            echo "Wrote $FILE"
          fi

          echo "changed=$changed" >> "$GITHUB_OUTPUT"

      - name: Commit & push (if changed)
        if: steps.apply.outputs.changed == 'true'
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add context/ || true
          git commit -m "journal: ${{ steps.derive.outputs.action }} ${{
            steps.derive.outputs.date }}" || { echo "Nothing to commit."; exit 0; }
          git push

      - name: Reply on issue (optional nice UX)
        if: github.event_name == 'issue_comment'
        shell: bash
        run: |
          set -euo pipefail
          NUM='${{ github.event.issue.number }}'
          ACTION='${{ steps.derive.outputs.action }}'
          DATE='${{ steps.derive.outputs.date }}'
          FILE='${{ steps.derive.outputs.file }}'

          MSG=""
          case "$ACTION" in
            delete) MSG="נמחק היומן של $DATE (אם היה קיים)." ;;
            get)    MSG="הצגתי את יומן $DATE ב-Actions summary." ;;
            append) MSG="הוספתי רשומה ליומן של $DATE." ;;
            write)  MSG="נוצר/נכתב מחדש יומן של $DATE." ;;
          esac

          gh api repos/${{ github.repository }}/issues/$NUM/comments \
            -f body="$MSG (קובץ: \`$FILE\`)"

